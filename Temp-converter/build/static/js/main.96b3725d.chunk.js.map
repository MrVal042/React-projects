{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","BoilingVerdict","props","TemperatureInput","handleChange","bind","e","this","onTemperatureChange","target","value","scale","onChange","placeholder","React","Component","TempCalc","handleCelsiusChange","handleFahrenheitChange","state","setState","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"iPAEMA,EAAa,CAACC,EAAE,UAAWC,EAAG,cAEpC,SAASC,EAAUC,GAAa,OAA2B,GAAnBA,EAAa,IAAU,EAE/D,SAASC,EAAaC,GAAU,OAAkB,EAAVA,EAAc,EAAK,GAE3D,SAASC,EAAWC,EAAaC,GAC/B,IAAMC,EAAQC,WAAWH,GACzB,GAAGI,OAAOC,MAAMH,GAAQ,MAAO,GAC/B,IAAMI,EAASL,EAAQC,GAEvB,OADgBK,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,WAGjB,SAASC,EAAeC,GACtB,OAAGA,EAAMb,SAAW,IAAa,oCAAOa,EAAMb,QAAb,qCAAiE,oCAASa,EAAMb,QAAkBa,EAAMb,QAAd,OAAzB,wC,IAK9Fc,E,kDACJ,WAAYD,GAAQ,IAAD,8BACjB,cAAMA,IACDE,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,gDAKnB,SAAaC,GAAIC,KAAKL,MAAMM,oBAAoBF,EAAEG,OAAOC,S,oBAEzD,WACE,IAAMnB,EAAcgB,KAAKL,MAAMX,YACzBoB,EAAQJ,KAAKL,MAAMS,MACzB,OACI,uBAAOD,MAAOnB,EAAaqB,SAAUL,KAAKH,aAAgBS,YAAc9B,EAAW4B,S,GAZ5DG,IAAMC,WAuDtBC,E,kDApCb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IACDe,oBAAsB,EAAKA,oBAAoBZ,KAAzB,gBAC3B,EAAKa,uBAAyB,EAAKA,uBAAuBb,KAA5B,gBAC9B,EAAKc,MAAQ,CAAC5B,YAAa,GAAIoB,MAAO,KAJrB,E,uDAOnB,SAAoBpB,GAClBgB,KAAKa,SAAS,CAACT,MAAM,IAAKpB,kB,oCAE5B,SAAuBA,GACrBgB,KAAKa,SAAS,CAACT,MAAM,IAAKpB,kB,oBAG5B,WACE,IAAMoB,EAAQJ,KAAKY,MAAMR,MACnBpB,EAAcgB,KAAKY,MAAM5B,YACzBF,EAAoB,MAAVsB,EAAerB,EAAWC,EAAaL,GAAYK,EAC7DJ,EAAuB,MAAVwB,EAAerB,EAAWC,EAAaH,GAAeG,EAEzE,OACE,qCACE,wDACA,qCACE,sEACA,sBAAK8B,UAAU,iBAAf,UACE,cAAC,EAAD,CAAkBV,MAAM,IAAIpB,YAAaF,EAASmB,oBAAqBD,KAAKU,sBAC5E,cAAC,EAAD,CAAkBN,MAAM,IAAIpB,YAAaJ,EAAYqB,oBAAqBD,KAAKW,4BAEjF,cAACjB,EAAD,CAAgBZ,QAASK,WAAWL,e,GA9BvByB,IAAMC,WC5BdO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.96b3725d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst scaleNames = {c:'Celsius', f: 'Fahrenheit'}\r\n\r\nfunction toCelsius(fahrenheit){ return (fahrenheit - 32) * 5 / 9;}\r\n\r\nfunction toFahrenheit(celsius){ return (celsius * 9 / 5) + 32;}\r\n\r\nfunction tryConvert(temperature, convert){\r\n  const input = parseFloat(temperature);\r\n  if(Number.isNaN(input)){return '';}\r\n  const output = convert(input);\r\n  const rounded = Math.round(output * 1000) / 1000;\r\n  return rounded.toString();\r\n}\r\n\r\nfunction BoilingVerdict(props){\r\n  if(props.celsius >= 100){ return <p>At {props.celsius} Celsius, The water would boil.</p>} return <p>At {!(props.celsius)? 'Zero': props.celsius} Celcius, The water would not boil</p>\r\n}\r\n\r\n\r\n\r\nclass TemperatureInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  \r\n  handleChange(e) {this.props.onTemperatureChange(e.target.value);}\r\n\r\n  render() {\r\n    const temperature = this.props.temperature;\r\n    const scale = this.props.scale;\r\n    return (\r\n        <input value={temperature} onChange={this.handleChange}   placeholder= {scaleNames[scale]} />      \r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass TempCalc extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\r\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\r\n    this.state = {temperature: '', scale: 'c'};\r\n  }\r\n  \r\n  handleCelsiusChange(temperature){\r\n    this.setState({scale:'c', temperature})\r\n  }\r\n  handleFahrenheitChange(temperature){\r\n    this.setState({scale:'f', temperature})\r\n  }\r\n\r\n  render() {\r\n    const scale = this.state.scale;\r\n    const temperature = this.state.temperature;\r\n    const celsius = scale === 'f'? tryConvert(temperature, toCelsius): temperature;\r\n    const fahrenheit = scale === 'c'? tryConvert(temperature, toFahrenheit): temperature;\r\n\r\n    return (\r\n      <>\r\n        <h2>Temperature Converter.</h2>\r\n        <fieldset>\r\n          <legend>Convert Celsius to Fahrenheit  :</legend>\r\n          <div className='inputContainer'>\r\n            <TemperatureInput scale='c' temperature={celsius} onTemperatureChange={this.handleCelsiusChange} />\r\n            <TemperatureInput scale='f' temperature={fahrenheit} onTemperatureChange={this.handleFahrenheitChange} />\r\n          </div>\r\n          <BoilingVerdict celsius={parseFloat(celsius)} />\r\n        </fieldset>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TempCalc;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}